mutate(latType=ifelse(lateral==1,
paste(lagPosition2,Position2,sep='_TO_'),
'N/A'))
### Special procedure for Ericsson, since it has missing tenure values
lmModel <- gam(Tenure ~ s(Age), family=gaussian, data=filter(QBSnapshotsFull, !(is.na(Tenure)) & !(is.na(Age))))
data.frame(Age=20:70) %>%
mutate(Tenure=predict(lmModel,newdata=.,type="response")) %>%
ggplot(aes(Age,Tenure)) + geom_line()
QBSnapshotsFull <- QBSnapshotsFull %>%
mutate(Tenure = case_when(is.na(Tenure) & !(is.na(Age)) ~ predict(lmModel,newdata=.,type="response"),
is.na(Tenure) & (is.na(Age)) ~ mean(QBSnapshotsFull$Tenure,na.rm=TRUE),
TRUE ~ Tenure)) %>%
filter(!(is.na(Tenure)))
activeHeadcount <- QBSnapshotsFull %>%
filter(IntervalDate==max(IntervalDate) & Turnover==0)
## Remove Outliers ----
### eliminate any lateral moves where >90% of the cases for that move type occur in a single month (assuming these are one-time events)
### I need the full timespan to do this properly -- this procedure with the data as is caused me to allow Multi-Functional-Finance moves as
### legit (the most common type), when that was clearly an outlier due to a huge one-time re-org
### you'll also want to compare software engineer and systems engineer movement in the final table
### they are responsible for a huge portion of the movement, but more of the software engineer movement
### got filtered out in the final table, it looks like, so systems engineer movement is huge and software engineer movement is small
### you'll need to look into that once you have more data
latsForElimination <- QBSnapshotsFull %>%
filter(lateral==1) %>%
group_by(latType) %>%
mutate(totalFreq=length(latType)) %>%
ungroup() %>%
group_by(latType,totalFreq,IntervalDate) %>%
summarise(freq=length(EmployeeID)) %>%
mutate(pect=round(freq/totalFreq,2)) %>%
arrange(-totalFreq,IntervalDate) %>%
filter(pect>=.20) %>%
ungroup() %>%
select(latType,IntervalDate) %>%
mutate(eliminationFlag=1)
QBSnapshotsFull <- QBSnapshotsFull %>%
left_join(.,latsForElimination,by=c('latType','IntervalDate')) %>%
mutate(eliminationFlag=replace_na(eliminationFlag,0)) %>%
mutate(lateral=ifelse(eliminationFlag==1,0,lateral)) %>%
select(-latType)
### filter down to an even three years of data
QBSnapshotsFull <- QBSnapshotsFull %>%
filter(IntervalDate>=max(QBSnapshotsFull$IntervalDate)-months(35))
## Set up dataset with six-month periods ----
### using this alternative way to map in the monthRank column, because the dense_rank function took over two hours!
monthRankMapping <- QBSnapshotsFull %>%
filter(IntervalDate>=max(QBSnapshotsFull$IntervalDate)-months(35)) %>%
select(IntervalDate) %>%
unique(.) %>%
arrange(IntervalDate) %>%
mutate(monthRank=row_number())
QBSnapshots <- QBSnapshotsFull %>%
left_join(.,monthRankMapping,by='IntervalDate') %>%
#group_by(EmployeeID) %>%
#mutate(dateRank = dense_rank(IntervalDate)) %>%
ungroup()
# take an even three years of data, then divide the full timespan into six month chunks; for production you might take a shorter span
QBSnapshots <- QBSnapshots %>%
mutate(period=ceiling(monthRank/6)) %>%
group_by(period) %>%
mutate(periodBegin=ifelse(monthRank==min(monthRank),1,0)) %>%
ungroup() %>%
group_by(EmployeeID,period) %>%
mutate(promotion=max(promotion)) %>% mutate(lateral=max(lateral))
periodBegin <- QBSnapshots %>%
group_by(EmployeeID,period) %>%
filter(monthRank==min(monthRank)) %>%
select(EmployeeID,period,lagPosition2,lagLevel) %>%
rename('positionBegin'='lagPosition2',
'levelBegin'='lagLevel') %>%
ungroup()
periodEnd <- QBSnapshots %>%
group_by(EmployeeID,period) %>%
filter(monthRank==max(monthRank)) %>%
select(EmployeeID,period,Position2,level) %>%
rename('positionEnd'='Position2',
'levelEnd'='level') %>%
ungroup()
QBSnapshots <- QBSnapshots %>%
left_join(.,periodBegin,by=c('EmployeeID','period')) %>%
left_join(.,periodEnd,by=c('EmployeeID','period')) %>%
mutate(latType=ifelse(lateral==1,paste(positionBegin,positionEnd,sep='_TO_'),'N/A')) %>%
mutate(promType=ifelse(promotion==1,paste(levelBegin,levelEnd,sep='_TO_'),'N/A')) %>%
filter(periodBegin==1) %>%
ungroup()
## lateral model ----
lateralMovesRollup<-QBSnapshots %>%
filter(lateral==1) %>%
filter(positionBegin!='Not Specified' & positionEnd!='Not Specified') %>%
### THIS FILTER IS VERY IMPORTANT -- IT GETS RID OF NOISEY MOVEMENT INTO- AND OUT OF POSITIONS THAT REALLY MESSES THINGS UP
filter(positionBegin!=positionEnd) %>%
group_by(latType) %>%
summarise(freq=length(EmployeeID)) %>%
arrange(-freq) %>%
filter(freq>=10) %>%
ungroup()
moves<-data.frame()
for(i in 1:nrow(lateralMovesRollup)) {
moveString<-lateralMovesRollup$latType[i]
fromPosition <- sub("_TO_.*", "", moveString)
toPosition <- sub(".*_TO_", "", moveString)
modelData <- QBSnapshots %>%
filter(positionBegin==fromPosition) %>%
mutate(lateral_i=ifelse(positionEnd==toPosition,1,0))
lmModel <- gam(lateral_i ~ s(Tenure), family=binomial, data=modelData)
data.frame(Tenure=0:20) %>%
mutate(risk=predict(lmModel,newdata=.,type="response")) %>%
ggplot(aes(Tenure,risk)) + geom_line()
activeHeadcount_i <- activeHeadcount %>%
filter(Position2==fromPosition) %>%
mutate(risk=predict(lmModel,newdata=.,type="response"))
moves_i <- data.frame(
from=fromPosition,
to=toPosition,
moves=round(sum(activeHeadcount_i$risk)/6,3)
)
moves<-rbind(moves,moves_i)
}
moves<-filter(moves,moves!=0)
### check against history
qaTransfers <- moves %>%
mutate(latType=paste(from,to,sep='_TO_')) %>%
select(latType,moves) %>%
mutate(moves=36*moves) %>%
left_join(.,lateralMovesRollup,by='latType')
### create net table
losses <- moves %>%
rename('Position2'='from') %>%
select(-to) %>%
rename('losses'='moves') %>%
group_by(Position2) %>%
summarise(losses=sum(losses)) %>%
ungroup()
gains <- moves %>%
rename('Position2'='to') %>%
select(-from) %>%
rename('gains'='moves') %>%
group_by(Position2) %>%
summarise(gains=sum(gains)) %>%
ungroup()
netMoves <-  gains %>%
merge(.,losses,by="Position2",all.x=TRUE,all.y=TRUE) %>%
mutate(gains=replace_na(gains,0),
losses=replace_na(losses,0)) %>%
mutate(net=gains-losses)
## promotions model ----
promotionsRollup<-QBSnapshots %>%
filter(promotion==1 & levelBegin!=999 & levelEnd!=999) %>%
### filter out executives and one level below (since we are not modeling promotions to Executive level)
filter(levelBegin<=8) %>%
### THIS FILTER IS VERY IMPORTANT -- IT GETS RID OF NOISEY MOVEMENT INTO- AND OUT OF POSITIONS THAT REALLY MESSES THINGS UP
filter(levelBegin!=levelEnd) %>%
group_by(Position2,promType) %>%
summarise(freq=length(EmployeeID)) %>%
arrange(-freq) %>%
#filter(freq>=5) %>%
ungroup()
promotionsLarge <- promotionsRollup %>%
filter(freq>=10) %>%
mutate(promType2=paste(Position2,substr(promType,1,1),sep='_'))
promotionsSmall <- promotionsRollup %>%
filter(freq<10) %>%
mutate(promType2=paste(Position2,substr(promType,1,1),sep='_'))
proms<-data.frame()
### Frequent Promotions (each gets its own GAM model)
pdf('D:/Development/predict/Diagnostics/Ericsson Mobility/promotionGams.pdf')
for(i in 1:nrow(promotionsLarge)) {
pos1String <- as.character(promotionsLarge$Position2[i])
moveString<-promotionsLarge$promType[i]
fromLevel <- as.numeric(sub("_TO_.*", "", moveString))
toLevel <- as.numeric(sub(".*_TO_", "", moveString))
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel,1,0))
lmModel <- gam(prom_i ~ s(Tenure), family=binomial,sp=.2, data=modelData)
print(data.frame(Tenure=0:20) %>%
mutate(risk=predict(lmModel,newdata=.,type="response")) %>%
ggplot(aes(Tenure,risk)) + geom_line() +
ggtitle(paste(pos1String,moveString,sep='')))
activeHeadcount_i <- activeHeadcount %>%
filter(Position2==pos1String & level==fromLevel) %>%
mutate(risk=predict(lmModel,newdata=.,type="response"))
proms_i <- data.frame(
Position2=pos1String,
from=fromLevel,
to=toLevel,
moves=round(sum(activeHeadcount_i$risk)/6,3)
)
proms<-rbind(proms,proms_i)
}
dev.off()
proms<-filter(proms,moves!=0)
promsSmall<-data.frame()
### Frequent Promotions (each gets its own GAM model)
for(i in 1:nrow(promotionsSmall)) {
pos1String <- as.character(promotionsSmall$Position2[i])
moveString<-promotionsSmall$promType[i]
fromLevel <- as.numeric(sub("_TO_.*", "", moveString))
toLevel <- as.numeric(sub(".*_TO_", "", moveString))
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel,1,0))
promRate<-mean(modelData$prom_i)
activeHeadcount_i <- activeHeadcount %>%
filter(Position2==pos1String & level==fromLevel) %>%
mutate(risk=promRate)
proms_i <- data.frame(
Position2=pos1String,
from=fromLevel,
to=toLevel,
moves=round(sum(activeHeadcount_i$risk)/6,3)
)
promsSmall<-rbind(promsSmall,proms_i)
}
promsSmall<-filter(promsSmall,moves!=0)
proms<-rbind(proms,promsSmall)
##### LEFT OFF HERE -- PLAN IS TO BIN ALL THE PROMOTIONS WITH SMALL SAMPLE SIZE (<10) INTO ONE LARGE
### POPULATION AND HAVE AN ALL-PURPOSE PROMOTION MODEL WITH TWO COVARIATES: LEVEL AND TENURE
### check against history
qaPromotions <- proms %>%
mutate(promType=paste(from,to,sep='_TO_')) %>%
select(Position2,promType,moves) %>%
mutate(moves=36*moves) %>%
left_join(.,promotionsRollup,by=c('Position2','promType'))
losses <- proms %>%
rename('level'='from') %>%
select(-to) %>%
rename('losses'='moves') %>%
group_by(Position2,level) %>%
summarise(losses=sum(losses)) %>%
ungroup()
gains <- proms %>%
rename('level'='to') %>%
select(-from) %>%
rename('gains'='moves') %>%
group_by(Position2,level) %>%
summarise(gains=sum(gains)) %>%
ungroup()
netProms <-  gains %>%
merge(.,losses,by=c("Position2","level"),all.x=TRUE,all.y=TRUE) %>%
mutate(gains=replace_na(gains,0),
losses=replace_na(losses,0)) %>%
mutate(net=gains-losses)
View(qaPromotions)
zzz <- QBSnapshotsFull %>%
filter(Position1=='Domain Support Specialist') %>%
arrange(IntervalDate)
zzz <- QBSnapshotsFull %>%
filter(Position2=='Domain Support Specialist') %>%
arrange(IntervalDate)
table(zzz$IntervalDate)
zzz <- QBSnapshotsFull %>%
filter(Position2=='HW Assembly and Test') %>%
arrange(IntervalDate)
table(zzz$IntervalDate)
zzz <- QBSnapshotsFull %>%
filter(Position2=='Field Services') %>%
arrange(IntervalDate)
table(zzz$IntervalDate)
zzz <- QBSnapshotsFull %>%
filter(Position2=='IT Engineer/Tester') %>%
arrange(IntervalDate)
table(zzz$IntervalDate)
View(promsSmall)
View(proms)
i<-265
pos1String <- as.character(promotionsSmall$Position2[i])
View(promotionsSmall)
i<-302
pos1String <- as.character(promotionsSmall$Position2[i])
moveString<-promotionsSmall$promType[i]
fromLevel <- as.numeric(sub("_TO_.*", "", moveString))
toLevel <- as.numeric(sub(".*_TO_", "", moveString))
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel,1,0))
promRate<-mean(modelData$prom_i)
activeHeadcount_i <- activeHeadcount %>%
filter(Position2==pos1String & level==fromLevel) %>%
mutate(risk=promRate)
proms_i <- data.frame(
Position2=pos1String,
from=fromLevel,
to=toLevel,
moves=round(sum(activeHeadcount_i$risk)/6,3)
)
View(proms_i)
View(activeHeadcount_i)
i<-303
pos1String <- as.character(promotionsSmall$Position2[i])
moveString<-promotionsSmall$promType[i]
fromLevel <- as.numeric(sub("_TO_.*", "", moveString))
toLevel <- as.numeric(sub(".*_TO_", "", moveString))
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel,1,0))
promRate<-mean(modelData$prom_i)
activeHeadcount_i <- activeHeadcount %>%
filter(Position2==pos1String & level==fromLevel) %>%
mutate(risk=promRate)
proms_i <- data.frame(
Position2=pos1String,
from=fromLevel,
to=toLevel,
moves=round(sum(activeHeadcount_i$risk)/6,3)
)
View(proms_i)
table(zzz$Position3)
zzz <- QBSnapshotsFull %>%
filter(Position2=='IT Engineer/Tester' & Position3=='05') %>%
arrange(IntervalDate)
table(zzz$IntervalDate)
i<-302
pos1String <- as.character(promotionsSmall$Position2[i])
moveString<-promotionsSmall$promType[i]
fromLevel <- as.numeric(sub("_TO_.*", "", moveString))
toLevel <- as.numeric(sub(".*_TO_", "", moveString))
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel,1,0))
promRate<-mean(modelData$prom_i)
.03*312
.03/6
.005*312
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel,1,0))
table(modelData$promotion)
2/1533
table(modelData$prom_i)
View(modelData)
## promotions model ----
promotionsRollup<-QBSnapshots %>%
filter(promotion==1 & levelBegin!=999 & levelEnd!=999) %>%
### filter out executives and one level below (since we are not modeling promotions to Executive level)
filter(levelBegin<=8) %>%
### THIS FILTER IS VERY IMPORTANT -- IT GETS RID OF NOISEY MOVEMENT INTO- AND OUT OF POSITIONS THAT REALLY MESSES THINGS UP
filter(levelBegin!=levelEnd) %>%
group_by(Position2,promType) %>%
summarise(freq=length(EmployeeID)) %>%
arrange(-freq) %>%
#filter(freq>=5) %>%
ungroup()
promotionsLarge <- promotionsRollup %>%
filter(freq>=10) %>%
mutate(promType2=paste(Position2,substr(promType,1,1),sep='_'))
promotionsSmall <- promotionsRollup %>%
filter(freq<10) %>%
mutate(promType2=paste(Position2,substr(promType,1,1),sep='_'))
proms<-data.frame()
### Frequent Promotions (each gets its own GAM model)
pdf('D:/Development/predict/Diagnostics/Ericsson Mobility/promotionGams.pdf')
for(i in 1:nrow(promotionsLarge)) {
pos1String <- as.character(promotionsLarge$Position2[i])
moveString<-promotionsLarge$promType[i]
fromLevel <- as.numeric(sub("_TO_.*", "", moveString))
toLevel <- as.numeric(sub(".*_TO_", "", moveString))
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel & promotion==1,1,0))
lmModel <- gam(prom_i ~ s(Tenure), family=binomial,sp=.2, data=modelData)
print(data.frame(Tenure=0:20) %>%
mutate(risk=predict(lmModel,newdata=.,type="response")) %>%
ggplot(aes(Tenure,risk)) + geom_line() +
ggtitle(paste(pos1String,moveString,sep='')))
activeHeadcount_i <- activeHeadcount %>%
filter(Position2==pos1String & level==fromLevel) %>%
mutate(risk=predict(lmModel,newdata=.,type="response"))
proms_i <- data.frame(
Position2=pos1String,
from=fromLevel,
to=toLevel,
moves=round(sum(activeHeadcount_i$risk)/6,3)
)
proms<-rbind(proms,proms_i)
}
dev.off()
proms<-filter(proms,moves!=0)
promsSmall<-data.frame()
### Frequent Promotions (each gets its own GAM model)
for(i in 1:nrow(promotionsSmall)) {
pos1String <- as.character(promotionsSmall$Position2[i])
moveString<-promotionsSmall$promType[i]
fromLevel <- as.numeric(sub("_TO_.*", "", moveString))
toLevel <- as.numeric(sub(".*_TO_", "", moveString))
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel,1,0))
promRate<-mean(modelData$prom_i)
activeHeadcount_i <- activeHeadcount %>%
filter(Position2==pos1String & level==fromLevel & promotion==1) %>%
mutate(risk=promRate)
proms_i <- data.frame(
Position2=pos1String,
from=fromLevel,
to=toLevel,
moves=round(sum(activeHeadcount_i$risk)/6,3)
)
promsSmall<-rbind(promsSmall,proms_i)
}
promsSmall<-filter(promsSmall,moves!=0)
proms<-rbind(proms,promsSmall)
##### LEFT OFF HERE -- PLAN IS TO BIN ALL THE PROMOTIONS WITH SMALL SAMPLE SIZE (<10) INTO ONE LARGE
### POPULATION AND HAVE AN ALL-PURPOSE PROMOTION MODEL WITH TWO COVARIATES: LEVEL AND TENURE
### check against history
qaPromotions <- proms %>%
mutate(promType=paste(from,to,sep='_TO_')) %>%
select(Position2,promType,moves) %>%
mutate(moves=36*moves) %>%
left_join(.,promotionsRollup,by=c('Position2','promType'))
View(qaPromotions)
zzz <- QBSnapshotsFull %>%
filter(Position2=='Supply Chain Planner' & Position3=='04') %>%
arrange(IntervalDate)
table(zzz$IntervalDate)
i<-1
pos1String <- as.character(promotionsLarge$Position2[i])
moveString<-promotionsLarge$promType[i]
fromLevel <- as.numeric(sub("_TO_.*", "", moveString))
toLevel <- as.numeric(sub(".*_TO_", "", moveString))
modelData <- QBSnapshots %>%
filter(Position2==pos1String & levelBegin==fromLevel) %>%
mutate(prom_i=ifelse(levelEnd==toLevel & promotion==1,1,0))
View(modelData)
View(qaPromotions)
zzz <- QBSnapshotsFull %>%
filter(Position2=='Domain Support Specialist' & Position3=='03') %>%
arrange(IntervalDate)
table(zzz$IntervalDate)
keep(netMoves,netProms,qaTransfers,qaPromotions,lateralMovesRollup,promotionsRollup,positionMapping,sqlConnString,sure=TRUE)
## Distribute Moves ----
## NOTE: this are monthly counts by Position
pos2Mapping <- positionMapping %>%
group_by(Position2) %>%
mutate(pos2Headcount=length(EmployeeID)) %>%
ungroup() %>%
group_by(PositionKey,Position2,pos2Headcount) %>%
summarise(headcount=length(EmployeeID)) %>%
ungroup() %>%
mutate(prop=round(headcount/pos2Headcount,10)) %>%
arrange(Position2,-prop) %>%
select(Position2,PositionKey,prop)
## Distribute Moves ----
## NOTE: this are monthly counts by Position
pos2Mapping <- positionMapping %>%
group_by(Position2) %>%
mutate(pos2Headcount=length(EmployeeID)) %>%
ungroup() %>%
group_by(AssignedPositionKey,Position2,pos2Headcount) %>%
summarise(headcount=length(EmployeeID)) %>%
ungroup() %>%
mutate(prop=round(headcount/pos2Headcount,10)) %>%
arrange(Position2,-prop) %>%
select(Position2,AssignedPositionKey,prop)
View(pos2Mapping)
AssignedPositionKeyMoves <- netMoves %>%
left_join(.,pos2Mapping,by=c('Position2')) %>%
mutate(LateralIn=gains*prop,
LateralOut=losses*prop) %>%
select(AssignedPositionKey,LateralIn,LateralOut)
## Distribute Promotions ----
## NOTE: this are monthly counts by Position
pos2pos3Mapping <- positionMapping %>%
mutate(level=case_when(
Position3=='E' ~ 10,
TRUE ~ as.numeric(substr(Position3,2,2))
)) %>%
group_by(Position2,level) %>%
mutate(pos2pos3Headcount=length(EmployeeID)) %>%
ungroup() %>%
group_by(AssignedPositionKey,Position2,level,pos2pos3Headcount) %>%
summarise(headcount=length(EmployeeID)) %>%
ungroup() %>%
mutate(prop=round(headcount/pos2pos3Headcount,10)) %>%
arrange(Position2,level,-prop) %>%
select(Position2,level,AssignedPositionKey,prop)
existingCombos <- pos2pos3Mapping %>%
mutate(Position2_level=paste(Position2,level,sep='-')) %>%
select(Position2_level) %>%
unique(.)
netPromsFilteredOut<-netProms %>%
filter(!(paste(Position2,level,sep='-') %in% existingCombos$Position2_level))
View(netPromsFilteredOut)
netProms<-netProms %>%
filter(paste(Position2,level,sep='-') %in% existingCombos$Position2_level)
AssignedPositionKeyProms <- netProms %>%
left_join(.,pos2pos3Mapping,by=c('Position2','level')) %>%
mutate(PromotionIn=gains*prop,
PromotionOut=losses*prop) %>%
select(AssignedPositionKey,PromotionIn,PromotionOut)
Transfers<-bind_rows(AssignedPositionKeyMoves,AssignedPositionKeyProms)
Transfers[is.na(Transfers)] <- 0
Transfers <- Transfers %>%
group_by(AssignedPositionKey) %>%
summarise(LateralIn=sum(LateralIn),
LateralOut=sum(LateralOut),
PromotionIn=sum(PromotionIn),
PromotionOut=sum(PromotionOut))
sum(netMoves$gains)
sum(netMoves$losses)
sum(netProms$gains)
sum(netPromsFilteredOut$gains)
sum(netProms$losses)
sum(Transfers$LateralIn)
sum(Transfers$LateralOut)
sum(Transfers$PromotionIn)
sum(Transfers$PromotionOut)
sqlSave(sqlConnString,Transfers,tablename='Transfers', rownames = F)
source('D:\\Development\\predict\\EricssonMobility\\1. Data Prep.R')
source('D:\\Development\\predict\\EricssonMobility\\2. Build Models.R')
source('D:\\Development\\predict\\EricssonMobility\\3. Distribute to Positions.R')
